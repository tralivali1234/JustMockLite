<#/*
 JustMock Lite
 Copyright © 2010-2015 Telerik AD

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/#>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>

<#+
	public const int MaxFuncArity = 16;

	public class TestBuilder
	{
		public TestBuilder()
		{
			matcherBuilder = new StringBuilder();
			methodArgumentsBuilder = new StringBuilder();
			callingArgumentsBuilder = new StringBuilder();
			statementBuilder = new StringBuilder();
			methodBuilder = new StringBuilder();
		}

		public StringBuilder MatcherBuilder{ get { return matcherBuilder; } }
		public StringBuilder MethodArgBuilder { get { return methodArgumentsBuilder; } }
		public StringBuilder CalleeArgBuilder {get { return callingArgumentsBuilder; } }
		public StringBuilder StatementBuilder { get { return statementBuilder; } }
		public StringBuilder MethodBuilder { get { return methodBuilder; } }

		private StringBuilder matcherBuilder;
		private StringBuilder methodArgumentsBuilder;
		private StringBuilder callingArgumentsBuilder;
		private StringBuilder statementBuilder;
		private StringBuilder methodBuilder;
	}

	public string[] GetNumberNames()
	{
		string [] numberNames = new string[]{ "One", "Two" , "Three", 
			"Four", "Five" , "Six", "Seven", "Eight", 
			"Nine" , "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen"};
		return numberNames;
	}

	public IList<TestBuilder> GetTestBuilder(string methodFormat, int startIndex, int numberOfMethods)
	{
		IList<TestBuilder> list = new List<TestBuilder>();

		for (int index = startIndex; index < numberOfMethods; index++)
		{
			var testBuilder = new TestBuilder();
				
			int offset = 1;	
			
			for(int argIndex = 1; argIndex <= index; argIndex++)
			{
				testBuilder.MatcherBuilder.Append("Arg.AnyInt");
				testBuilder.MethodArgBuilder.AppendFormat("{0} arg{1}", "int", offset);
					
				testBuilder.StatementBuilder.AppendFormat("arg{0}", offset);
					
				string delimeter = ", ";
					
				testBuilder.CalleeArgBuilder.Append(1);
		
				if (argIndex < index)
				{
					testBuilder.MatcherBuilder.Append(delimeter);
					testBuilder.MethodArgBuilder.Append(delimeter);
					testBuilder.CalleeArgBuilder.Append(delimeter);
					testBuilder.StatementBuilder.Append(" + ");
				}
				offset++;
			}
				
			testBuilder.MethodBuilder.AppendFormat(methodFormat, testBuilder.MethodArgBuilder.ToString()); 
			list.Add(testBuilder);
		}

		return list;
	}

#>