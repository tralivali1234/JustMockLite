/*
 JustMock Lite
 Copyright © 2010-2015 Telerik AD

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".cs" #>
<#@ include file="TestBuilder.include"#>
using System;
using System.Collections.Generic;
using System.Linq;

#if NUNIT
using NUnit.Framework;
using TestCategory = NUnit.Framework.CategoryAttribute;
using TestClass = NUnit.Framework.TestFixtureAttribute;
using TestMethod = NUnit.Framework.TestAttribute;
using TestInitialize = NUnit.Framework.SetUpAttribute;
using TestCleanup = NUnit.Framework.TearDownAttribute;
using AssertionException = NUnit.Framework.AssertionException;
#elif VSTEST_PORTABLE
using Microsoft.VisualStudio.TestPlatform.UnitTestFramework;
using AssertionException = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.AssertFailedException;
#else
using Microsoft.VisualStudio.TestTools.UnitTesting;
using AssertionException = Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException;
#endif

namespace Telerik.JustMock.MSTest2.Tests.Coverage
{
	[TestClass]
	public class ReturnsFixture
	{
	
		<#
		var methodBuilder = new StringBuilder();
		
		int index = 5;
		foreach (var builder in GetTestBuilder("int Echo({0});\r\n\t\t\t", index,  17))
		{
			methodBuilder.Append(builder.MethodBuilder);
		#>
		
		[TestMethod, TestCategory("Lite"), TestCategory("Returns")]
		public void ShouldPass<#= GetNumberNames()[index - 1] #>ArgsToReturns()
		{
			var foo = Mock.Create<IFoo>();
			Mock.Arrange(() => foo.Echo(<#= builder.MatcherBuilder.ToString() #>))
				.Returns((<#= builder.MethodArgBuilder.ToString() #>) => <#= builder.StatementBuilder.ToString() #>);

			int result = foo.Echo(<#= builder.CalleeArgBuilder #>);

			Assert.Equal(<#= index #>, result);
		}
	
		
		<# index++; } #>
		
		public interface IFoo
		{
			<#= methodBuilder.ToString() #>
		}
	}
}